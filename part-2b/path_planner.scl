// Static input facts
type grid_node(x: usize, y: usize)

// Input from neural networks
type actor(x: usize, y: usize)
type goal(x: usize, y: usize)
type enemy(x: usize, y: usize)

// Possible actions to take
type Action = Up | Right | Down | Left

// Output relation
type action_to_take(Action)

// Basic connectivity
rel node(x, y) = grid_node(x, y), not enemy(x, y)
rel edge(x, y, x, yp, Up) = node(x, y), node(x, yp), yp == y + 1 // Up
rel edge(x, y, xp, y, Right) = node(x, y), node(xp, y), xp == x + 1 // Right
rel edge(x, y, x, yp, Down) = node(x, y), node(x, yp), yp == y - 1 // Down
rel edge(x, y, xp, y, Left) = node(x, y), node(xp, y), xp == x - 1 // Left

// Path for connectivity; will condition on no enemy on the path
rel path(x, y, x, y) = node(x, y)
rel path(x, y, xp, yp) = edge(x, y, xp, yp, _)
rel path(x, y, xpp, ypp) = path(x, y, xp, yp), edge(xp, yp, xpp, ypp, _)

// Get the next position
rel next_position(a, xp, yp) = actor(x, y), edge(x, y, xp, yp, a)
rel next_action(a) = next_position(a, x, y), goal(gx, gy), path(x, y, gx, gy)

// Constraint violation
rel too_many_goal() = n := count(x, y: goal(x, y)), n > 1
rel too_many_enemy() = n := count(x, y: enemy(x, y)), n > 5
rel violation() = too_many_goal() or too_many_enemy()
